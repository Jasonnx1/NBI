public class Voronoi
{
// Pressing Control-R will render this sketch.
int i = 0;
int myw;
int myh;
int nVoronoi = 10;
int[] seeds_x = new int[nVoronoi];
int[] seeds_y = new int[nVoronoi];
color[] seed_colors = new color[nVoronoi];

int minDistance = 0;
int minIndex = 0;

Voronoi()
{
   myw = width;
   myh = height;
}


void generateMap()
{
      for(i=0; i < nVoronoi; i = i+1)
    {
        // Keep them not too close to the borders, otherwise it's not fun
        // TODO: should also check that two or more are not generated in the same spot!
        seeds_x[i] = int(random(20, myw - 20));
        seeds_y[i] = int(random(20, myh - 20));
        
        seed_colors[i] = color(random(255),random(255), 255);
      
    }
  
}

void display()
{
 
   // For each pixel
    for(int px = 0; px < myw; px = px +1)
    {
         for(int py = 0; py < myh; py = py +1)
         {
             // Check distances to colors
             minDistance = ((px  - seeds_x[0]) * (px - seeds_x[0])) +  ((py  - seeds_y[0]) * (py  - seeds_y[0]));
             minIndex = 0;

             for (int nc = 1; nc < nVoronoi; nc = nc+1)
             {
                 int dist = ((px  - seeds_x[nc]) * (px - seeds_x[nc])) +  ((py  - seeds_y[nc]) * (py  - seeds_y[nc]));
                 
                 if (dist <= minDistance)
                 {
                     minDistance = dist;
                     minIndex = nc;
                }
            }
            // Distance has been picked. Color!
            //set(px, py, seed_colors[minIndex]);
            //line(0, 7, 85, 75);
            stroke(seed_colors[minIndex]);
            point(px, py);
        }
    }
  
    
    noStroke();
    fill(0);
  
    for (int nc = 0; nc < nVoronoi; nc = nc+1)
     {
         
       ellipse(seeds_x[nc], seeds_y[nc], 3, 3);
       
    }
  
  
}


}
